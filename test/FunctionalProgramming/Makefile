##### CONSTANT BOILER PLATE #######
DIRPATH=.\..\..\src\FunctionalProgramming
BINPATH=.\..\bin
OBJPATH=.\..\obj
TESTDIR=.
TEST_BINPATH=.\..\bin
TEST_OBJPATH=.\..\obj

FILENAME=func_prog
TESTNAME=test_func_prog


### app file ending ###
# $(MAKE_CALL) code here \
!ifndef 0 # \  
EXE_FILETYPE=.exe # \
!else
# Make code here 
EXE_FILETYPE=#
#
!endif


INCL= 
CC=gcc
CFLAGS= #-I $(INCL)


TESTBIN=$(TEST_OBJPATH)\$(TESTNAME).o
CTEST=$(TESTDIR)\$(TESTNAME).c
TEST_EXE=$(TEST_BINPATH)\$(TESTNAME)$(EXE_FILETYPE)

SOURCES = $(CTEST)
HEADERS = 
APPS = $(TEST_EXE)

FILEBIN=$(OBJPATH)\$(FILENAME).o
CFILE=$(DIRPATH)\$(FILENAME).c
FILE_EXE=$(BINPATH)\$(FILENAME)$(EXE_FILETYPE)

SOURCES = $(SOURCES) $(CFILE)
HEADERS = $(HEADERS) 
APPS = $(APPS) $(FILE_EXE)

OBJBUILDS =
TST_OBJBUILDS =

##### VARYING FILE BOILER PLATE #######
OBJ1PATH=
OBJ1NAME=
OBJ1SRC=
OBJ1HDR=
OBJ1=

SOURCES = $(SOURCES) $(OBJ1SRC)
HEADERS = $(HEADERS) $(OBJ1HDR)
OBJECTS = $(OBJECTS) $(OBJ1)
OBJSRCS = $(SOURCES) $(OBJ1SRC)
OBJBUILDS = #$(OBJBUILDS) 1


OBJ2PATH=
OBJ2NAME=
OBJ2SRC=
OBJ2HDR=
OBJ2=

SOURCES = $(SOURCES) $(OBJ2SRC)
HEADERS = $(HEADERS) $(OBJ2HDR)
OBJECTS = $(OBJECTS) $(OBJ2)
OBJSRCS = $(SOURCES) $(OBJ1SRC)
OBJBUILDS = #$(OBJBUILDS) 2



##### VARYING FILE BOILER PLATE #######
TST_OBJ1PATH=
TST_OBJ1NAME=
TST_OBJ1SRC=
TST_OBJ1HDR=
TST_OBJ1=

SOURCES = $(SOURCES) $(TST_OBJ1SRC)
HEADERS = $(HEADERS) $(TST_OBJ1HDR)
OBJECTS = $(OBJECTS) $(TST_OBJ1)
OBJSRCS = $(SOURCES) $(TST_OBJ1SRC)
TST_OBJBUILDS = #$(TST_OBJBUILDS) 1

TST_OBJ2PATH=
TST_OBJ2NAME=
TST_OBJ2SRC=
TST_OBJ2HDR=
TST_OBJ2=

SOURCES = $(SOURCES) $(TST_OBJ2SRC)
HEADERS = $(HEADERS) $(TST_OBJ2HDR)
OBJECTS = $(OBJECTS) $(TST_OBJ2)
OBJSRCS = $(SOURCES) $(TST_OBJ2SRC)
TST_OBJBUILDS = #$(TST_OBJBUILDS) 2


OBJNAME=
OBJPATH=.
OBJBIN=#$(DIRPATH)\$(OBJPATH)\$(OBJNAME).o
OBJ=#$(TEST_OBJPATH)\$(OBJNAME)



# Code below should allow $(MAKE_CALL) and make to operate successfully
# $(MAKE_CALL) code here \
!ifndef 0 # \  
MV=move # \
RM=del # \
CP=copy # \
MAKE_CALL=nmake # \
!else
# Make code here 
MV=mv -f # 
RM=rm -f # 
CP=cp -f # 
MAKE_CALL=make #
# 
!endif



##### CONSTANT BUILD #######
MAKE: $(FILEBIN) $(TESTBIN) $(OBJECTS)
  $(MAKE_CALL) build
  $(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
  $(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) -o $(TEST_EXE)
  $(MAKE_CALL) clean_up

MAKE_OBJ: $(FILEBIN) $(TESTBIN) $(OBJECTS)
  $(MAKE_CALL) build
  $(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
  $(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) -o $(TEST_EXE)

fast: $(FILEBIN) $(TESTBIN) $(OBJECTS)
  $(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
  $(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) -o $(TEST_EXE)
  $(MAKE_CALL) clean_up

$(FILEBIN): $(CFILE)
  (cd $(DIRPATH) && $(MAKE_CALL) MAKE_OBJ)

$(TESTBIN): $(CTEST)
  $(CC) -c $(CFLAGS) $(CTEST) -o $(TESTBIN)
  $(MAKE_CALL) BUILD_OBJ

build:
  $(CP) blankmake Makefile
  FOR %%i IN ($(OBJBUILDS))\
    DO \
      @echo( $$(CC) $$(CFLAGS) -c $$(TST_OBJ%%iSRC) -o $$(TST_OBJ%%i) >> Makefile

run:
  ($(FILE_EXE))

test:
  ($(TEST_EXE))

clean:
  $(RM) $(APPS)

clean_up:
  $(RM) $(FILEBIN) $(TESTBIN) $(OBJECTS)

clean_all:
  $(MAKE_CALL) clean_up
  $(MAKE_CALL) clean
  
BUILD_OBJ: 
  @echo building...
#####  VARIABLE BUILD  #####
